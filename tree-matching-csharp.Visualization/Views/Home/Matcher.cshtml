@model MatcherViewModel
@section header
{
    <style>
        iframe {
            width: 100%;
            height: 1500px;
            border:  solid 1px #a9aaae;
            margin-top:  15px;
        }
        form {
            border: #a9aaae solid 1px;
            padding: 10px;
            margin:  15px;
        }
    </style>
}
<form enctype="multipart/form-data" method="post">
    <div class="row align-items-end">
        <div class="col-3">
            <label asp-for="@Model.Host"></label>
            <input class="form-control" asp-for="@Model.Host">
        </div>
        <div class="col-3">
            <label asp-for="@Model.Website1"></label>
            <input class="form-control" asp-for="@Model.Website1" type="file">
        </div>
        <div class="col-3">
            <label asp-for="@Model.Website2"></label>
            <input class="form-control" asp-for="@Model.Website2" type="file">
        </div>
        <div class="col-1"></div>
        <div class="col-2">
            <input class="form-control btn btn-outline-primary" type="submit" value="Upload"/>
        </div>
    </div>
</form>
@* <form enctype="multipart/form-data" method="post"> *@
@*     <div class="row align-items-end"> *@
@*         <div class="col-5"> *@
@*             <label asp-for="@Model.Source"></label> *@
@*             <input class="form-control" asp-for="@Model.Source"> *@
@*         </div> *@
@*         <div class="col-5"> *@
@*             <label asp-for="@Model.Target"></label> *@
@*             <input class="form-control" asp-for="@Model.Target"> *@
@*         </div> *@
@*         <div class="col-2"> *@
@*             <input class="form-control btn btn-outline-primary" type="submit" value="Browse"/> *@
@*         </div> *@
@*     </div> *@
@* </form> *@

<div class="row">
    <div class="col-6">
        @if (!string.IsNullOrWhiteSpace(Model.SourceDoc))
        {
            <iframe id="source" srcdoc="@(Model.SourceDoc)"></iframe>
        }
        else if (!string.IsNullOrEmpty(Model.Source))
        {
            <iframe id="source" src="@(Model.Source)"></iframe>
        }
    </div>
    <div class="col-6">
        @if (!string.IsNullOrWhiteSpace(Model.TargetDoc))
        {
            <iframe id="target" srcdoc="@(Model.TargetDoc)"></iframe>
        }
        else if (!string.IsNullOrEmpty(Model.Target))
        {
            <iframe id="target" src="@(Model.Target)"></iframe>
        }
    </div>
</div>

@section Scripts
{
    <script>
    function getIFrame(iframeId) {
        return document.getElementById(iframeId).contentWindow.document;
    }
    const smallElementCalculator = (body) => {
        const getSurface = (el) => {
            let rect = el.getBoundingClientRect()
            return rect.width * rect.height
        }
        const bodySurface = getSurface(body)
        return el => getSurface(el) / bodySurface < 0.4
    }
    const highlighter = (iframe) => {
        let prevEl = null
        let backgroundColor = ""
        let border = ""
        const reset = () => {
            if (!prevEl) return
            prevEl.style.backgroundColor = backgroundColor;
            prevEl.style.border = border;
        }
        const highlight = (signature, scroll = false) => {
            reset()
            const el = iframe.querySelector(`[signature="${signature}"]`);
            if (!el) return
            prevEl = el
            backgroundColor = el.style.backgroundColor
            border = el.style.border
            el.style.backgroundColor = 'yellow';
            el.style.border = 'solid red 2px';
            if (scroll)
                el.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                    // inline: 'center'
                });
        }
        return {
            highlight: highlight,
            reset: reset
        }
    }
    window.onload = function () {
        const signatureAttribute = "signature"
        let iframeSource = getIFrame("source");
        let iframeTarget = getIFrame("target");
        let highlighterSource = highlighter(iframeSource)
        let highlighterTarget = highlighter(iframeTarget)
        const isSmall = smallElementCalculator(iframeSource.body)
        iframeSource.querySelectorAll('*')
        .forEach(el => {
            if (!isSmall(el)) return
            let signature = el.getAttribute(signatureAttribute)
            el.addEventListener('mouseenter', () => {
                highlighterSource.highlight(signature)
                highlighterTarget.highlight(signature, scroll)
                return false;
            })
        })
    }
    </script>
}
